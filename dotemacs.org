* Minimal
  #+NAME: minimal-config
  #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
    (setq delete-by-moving-to-trash 1)
    (setq auto-save-default nil)

    (setq initial-scratch-message nil)
    (setq inhibit-startup-screen t) ;; inhibit-splash-screen is an alias for inhibit-startup-screen
    (setq visible-bell t)
    (setq ring-bell-function #'ignore)
    (setq confirm-kill-emacs 'yes-or-no-p)

    (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
    (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (when (fboundp 'blink-cursor-mode) (blink-cursor-mode 0))
    (when (fboundp 'tooltip-mode) (tooltip-mode 0))


    (show-paren-mode t)
    ;; prettify settings
    ;; https://github.com/WolfeCub/dotfiles/tree/master/emacs/.emacs.d
    (setq prettify-symbols-unprettify-at-point 'right-edge)
    (setq inhibit-compacting-font-caches t)
    (global-prettify-symbols-mode 1)
    (global-font-lock-mode t)
    ;;  (global-display-line-numbers-mode)
    (file-name-shadow-mode t) ;; smart file names in mini buffer

    (global-font-lock-mode t) ;; syntax highlighting on
    (setq font-lock-maximum-decoration t)
    (setq column-number-mode t)
    (setq require-final-newline 'query)
    (setq font-lock-maximum-decoration t)
    (setq frame-title-format '(buffer-file-name "%f" ("%b"))) ;;titlebar=buffer unless filename
    (setq-default indent-tabs-mode nil)   ;;use spaces instead of evil tabs
    (setq-default major-mode 'org-mode)
    (defalias 'yes-or-no-p 'y-or-n-p)

    (put 'narrow-to-region 'disabled nil)

    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file 'noerror)

    (load-theme 'tango-dark)

  #+END_SRC
* Dired
  #+NAME: dired-config
  #+BEGIN_SRC emacs-lisp
    (add-hook 'dired-load-hook (function (lambda () (load "dired-x"))))

    (defcustom list-of-dired-switches
      '(("-l" . "classic")
        ("-la" . "all")
        ("-lA" . "no . & ..")
        ("-lA --group-directories-first" . "directories first"))
      "List of ls switches (together with a name to display in the mode-line) for dired to cycle among.")

    (defun dotemacs--cycle-dired-switches ()
      "Cycle through the list `list-of-dired-switches' of switches for ls"
      (interactive)
      (setq list-of-dired-switches
            (append (cdr list-of-dired-switches)
                    (list (car list-of-dired-switches))))
      (dired-sort-other (caar list-of-dired-switches))
      (setq mode-name (concat "Dired " (cdar list-of-dired-switches)))
      (force-mode-line-update))

    (defun dotemacs--dired-mode-hook ()
      (local-set-key (kbd "z") #'dotemacs--cycle-dired-switches))
    (add-hook 'dired-mode-hook 'dotemacs--dired-mode-hook)

  #+END_SRC
* IDO
  #+NAME: ido-config
  #+BEGIN_SRC emacs-lisp
    ;;https://news.ycombinator.com/item?id=14879375
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (setq ido-create-new-buffer 'always)
    (progn
      ;; ignoring
      ;; https://emacs.stackexchange.com/questions/5491/setting-ido-ignore-buffers-doesnt-cause-buffers-to-be-ignored-wheres-the-er

      ;; C-a in ido minibuffer to toggle ido showing hidden buffers, 

      ;; to use a var instead of a custom:
      ;;(defvar ido-dont-ignore-buffer-names '("*grep*" "*Messages*"))

      (defcustom ido-dont-ignore-buffer-names
        '(("*grep*" . "grep")
          ("*Messages*" . "Messages"))
        "List of buffers that ido shouldn't ignore")

      (defun ido-ignore-most-star-buffers (name)
        (and
         (string-match-p "^*" name)
         (not (member name ido-dont-ignore-buffer-names))))

      (setq ido-ignore-buffers (list "\\` " #'ido-ignore-most-star-buffers)))

    (ido-mode 1)

  #+END_SRC
* iBuffer
  #+NAME: ibuffer-config
  #+BEGIN_SRC emacs-lisp
    (setq ibuffer-expert t)
    (setq ibuffer-show-empty-filter-groups nil)
    (setq ibuffer-saved-filter-groups
          '(("home"
             ("emacs-config" (or
                              (filename . ".emacs.d")
                              (filename . ".emacs")
                              (filename . ".emacs-custom.el")))
             ("org-files" (or
                           (used-mode . org-agenda-mode)
                           (used-mode . org-mode)))
             ("star-files" (name . "^*"))
             )))

    (setq ibuffer-saved-filters
          '(("hider"
             ((not name . "^*")
              (not used-mode . org-mode)))
            ))

  #+END_SRC
* Functions
  #+NAME: functions-definitions
  #+BEGIN_SRC emacs-lisp
    (defun dotemacs-display-results (contents &optional mode)
      (interactive)
      (let ((results-buffer-name "*RESULTS*"))
        (switch-to-buffer results-buffer-name)
        (setq inhibit-read-only :yes)
        (delete-region (point-min) (point-max))
        (insert contents)
        (if mode (funcall mode))
        (indent-region (point-min) (point-max))
        (goto-char (point-min))
        (special-mode)
        (delete-other-windows)))

    (defun dotemacs-fix-html ()
      (interactive)
      ;;(goto-char (point-min))
      ;;(while (re-search-forward "><" nil :noerror) (replace-match ">\n<"))
      ;;(indent-region (point-min)(point-max))
      (message "Try sgml-pretty-print or use dotemacs-jta-reformat-xml"))

    (defun dotemacs-jta-reformat-xml ()
      "Reformats xml to make it readable (respects current selection).
    https://stackoverflow.com/questions/137043/can-emacs-re-indent-a-big-blob-of-html-for-me"
      (interactive)
      (save-excursion
        (let ((beg (point-min))
              (end (point-max)))
          (if (and mark-active transient-mark-mode)
              (progn
                (setq beg (min (point) (mark)))
                (setq end (max (point) (mark))))
            (widen))
          (setq end (copy-marker end t))
          (goto-char beg)
          (while (re-search-forward ">\\s-*<" end t)
            (replace-match ">\n<" t t))
          (goto-char beg)
          (indent-region beg end nil))))

    (defun dotemacs-display-results-html (contents)
      (interactive)
      (let ((results-buffer-name "*RESULTS*"))
        (switch-to-buffer results-buffer-name)
        (setq inhibit-read-only :yes)
        (delete-region (point-min) (point-max))
        (insert contents)
        (funcall 'mhtml-mode)
        (dotemacs-fix-html)
        (indent-region (point-min) (point-max))
        (goto-char (point-min))
        (view-mode)
        (delete-other-windows)))

    (defun dotemacs--scratch-screen ()
      (interactive)
      (switch-to-buffer "*scratch*")
      (delete-other-windows))

    (defun dotemacs--revert-buffer-noconfirm ()
      (interactive)
      (revert-buffer nil 'NOCONFIRM))

    (defun dotemacs--reopen-this-file-as-sudo ()
      "https://www.reddit.com/r/emacs/comments/9sp7hh/show_me_your_functions/e8rbndm"
      (interactive)
      (when-let* ((p (point))
                  (file-name (buffer-file-name)))
                 (find-alternate-file (concat "/sudo::" file-name))
                 (goto-char p)))

    ;; don't need this, setq-default sgml-quick-key to 'close
    ;; (defun dotemacs--fix-mhtml-mode ()
    ;;   "sets sgml-quick-keys to 'close"
    ;;   (interactive)
    ;;   (setq sgml-quick-keys 'close))

  #+END_SRC
* Skeletons
  #+NAME: skeletons-definitions
  #+BEGIN_SRC emacs-lisp
    (define-skeleton dotemacs--skel-html-1
      "HTML5 App Template"
      >  "<!DOCTYPE html>" \n
      >  "<html>" \n
      >  "<head>" \n
      >  "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">" \n
      >  "<meta charset=\"utf-8\">" \n
      >  "<style>" \n
      -2 "</style>" \n
      >  "<script>" \n
      -2 "</script>" \n
      -2 "</head>" \n
      >  "<body>" \n
      -2 "</body>" \n
      -2 "</html>"
      >  \n)

    (define-skeleton dotemacs--skel-html-2
      "HTML5 App Template"
      >  "<!DOCTYPE html>" \n
      >  "<html>" \n
      >  "<head>" \n
      >  "<meta charset=\"utf-8\">" \n
      >  "<script>" \n
      -2 "</script>" \n
      -2 "</head>" \n
      >  "<body>" \n
      -2 "</body>" \n
      >  "</html>"
      >  \n)

  #+END_SRC
* Global Keybindings
  #+NAME: global-keybindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-b") #'ibuffer)
    (global-set-key (kbd "C-;") #'delete-other-windows)
    (global-set-key (kbd "C-c q") #'comment-or-uncomment-region)
    (global-set-key (kbd "C-c e") #'eval-buffer)
    (global-set-key (kbd "C-c s") #'dotemacs--scratch-screen)
    (global-set-key (kbd "C-c r") #'dotemacs--revert-buffer-noconfirm)
    (global-set-key (kbd "C-c t") #'org-capture)
    (global-set-key (kbd "C-c a") #'org-agenda)

  #+END_SRC
* Built In Modes
** js-mode
   Set indent level to 2 from 4
   #+NAME: js-mode-config
   #+BEGIN_SRC emacs-lisp
     (setq-default js-indent-level 2)
   #+END_SRC
** mhtml-mode
   configure mhtml-mode so tags are closed immediately after typeing "</"
   setting 'sgml-quick-keys' to 'close before loading mhtml or using setq-default
   causes other behavior
   but setting to 'close as a hook (mhtml-mode-hook) works
   #+NAME: mhtml-mode-config
   #+BEGIN_SRC emacs-lisp
     (add-hook 'mhtml-mode-hook (lambda () (setq sgml-quick-keys 'close)))
   #+END_SRC
* Packages
  Packages Configuration
  #+NAME: packages-config
  #+BEGIN_SRC emacs-lisp :comments org
    (require 'package)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (package-initialize)

  #+END_SRC
* NoWeb Output
  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs :comments org :noweb yes
    <<minimal-config>>
    <<dired-config>>
    <<ido-config>>
    <<ibuffer-config>>
    <<functions-definitions>>
    <<skeletons-definitions>>
    <<global-keybindings>>
    <<js-mode-config>>
    <<mhtml-mode-config>>
    <<packages-config>>
  #+END_SRC
